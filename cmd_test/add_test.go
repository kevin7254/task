package cmd_test

import (
	"bytes"
	"fmt"
	"github.com/spf13/cobra"
	"path/filepath"
	"strings"
	"task/cmd"
	"task/data"
	"task/storage"
	"testing"
)

func executeCommand(root *cobra.Command, args ...string) (output string, err error) {
	buf := new(bytes.Buffer)
	root.SetOut(buf)
	root.SetErr(buf)
	root.SetArgs(args)
	_, err = root.ExecuteC()
	return buf.String(), err
}

func TestAddCmd_Success(t *testing.T) {
	tempDir := t.TempDir()
	testStorageFile := filepath.Join(tempDir, "test_tasks.json")

	// Initialize a real storage instance pointing to the temporary file
	s, err := storage.NewStorage(testStorageFile)
	if err != nil {
		t.Fatalf("Failed to create test storage: %v", err)
	}
	data.SetStore(s) // Inject this store into the cmd package

	// 2. Define test case
	taskName := "My New Test Task"
	args := []string{"add", taskName} // Command is "add", argument is the task name

	// 3. Execute the command
	output, execErr := executeCommand(cmd.RootCmd, args...)
	if execErr != nil {
		// This error is from cobra if the command itself (like a required flag missing) fails,
		// or if Run func returns an error (not currently the case for AddCmd).
		t.Fatalf("executeCommand failed: %v. Output: %s", execErr, output)
	}

	// 4. Verify command output
	expectedOutput := fmt.Sprintf("Successfully added task: %s\n", taskName)
	if !strings.Contains(output, expectedOutput) {
		t.Errorf("Expected output to contain %q, but got %q", expectedOutput, output)
	}

	// 5. Verify storage state
	// Retrieve tasks directly from the store we injected
	tasks := s.ListAllTasks()
	if len(tasks) != 1 {
		t.Fatalf("Expected 1 task in storage, found %d", len(tasks))
	}
	if tasks[0].Title != taskName {
		t.Errorf("Expected task name to be %q, got %q", taskName, tasks[0].Title)
	}
	// You can add more assertions for other task fields (ID, Status, etc.)
	// Note: If ID is auto-generated by storage, you might check for non-zero or a specific sequence.
	// Comparing time.Time values can be tricky; consider checking if it's recent or ignoring it if not critical.
}

func TestAddCmd_EmptyTaskName(t *testing.T) {
	tempDir := t.TempDir()
	testStorageFile := filepath.Join(tempDir, "test_tasks.json")
	s, err := storage.NewStorage(testStorageFile)
	if err != nil {
		t.Fatalf("Failed to create test storage: %v", err)
	}
	data.SetStore(s)

	args := []string{"add"} // No task name provided

	output, _ := executeCommand(cmd.RootCmd, args...) // We don't expect execErr here if Run handles it gracefully

	expectedErrorMsg := "Error: Task name cannot be empty.\n"
	if !strings.Contains(output, expectedErrorMsg) {
		t.Errorf("Expected error message %q in output, got %q", expectedErrorMsg, output)
	}

	// Verify no task was added to storage
	tasks := s.ListAllTasks()
	if len(tasks) != 0 {
		t.Errorf("Expected 0 tasks in storage, found %d", len(tasks))
	}
}
